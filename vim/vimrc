""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configuration
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible
set noshowmode

" Encoding {{{
scriptencoding 'utf-8'
set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8
set fileformats=unix,dos,mac
" }}}

" screen lines to use for the command-line
set cmdheight=4

" Indentation {{{
set autoindent
set expandtab
set shiftround
set shiftwidth=2
set softtabstop=2
set tabstop=2
" }}}

set textwidth=99

" case insensitive searching
set ignorecase

set iskeyword+=_,$,@,%,#

" Whitespace characters
set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:␣

" Show line numbers
set number

" History
set history=5000

" Persistent undo
set undofile
set undolevels=1000
set undoreload=10000

" Automatically re-read files
set autoread

" Default window position when splitting
set splitbelow
set splitright

" Default shell
set shell=sh

" time in milliseconds that is waited for a sequence to complete
set timeoutlen=600

" alias unnamed register to the + register
"set clipboard=unnamedplus

set viminfo='100,<50,s10,h,%

" Unclutter current working directory
" // means that file names will be built from the complete path to
" the file with all path separators substituted to percent signs.
set backupdir=~/.vim/.backup//,/tmp//
set directory=~/.vim/.swp//,/tmp//
set undodir=~/.vim/undo//,/tmp//

set verbosefile=~/.vim/verbose.log

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Key bindings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Switching buffers
nnoremap <silent> <F12> :bnext<CR>
nnoremap <silent> <F11> :bprev<CR>
" Switching tabs
nnoremap <silent> ;tn :tabnext<CR>
nnoremap <silent> ;tp :tabprev<CR>
" Open new buffer
nnoremap <leader>T :enew<CR>
" Close the current buffer and move to the previous one
nmap <leader>bq :bp <BAR> bdelete! #<CR>

nnoremap <C-W><C-W> :update<CR>

" Insert current date/time
inoremap <silent> <C-D>D <C-R>=strftime("%F")<CR>
inoremap <silent> <C-D>T <C-R>=strftime("%T")<CR>

" Remove trailing whitespace
nnoremap <Leader>rtw :%s/\s\+$//e<CR>

" wordwise yank from line above
" sauce: http://vim.wikia.com/wiki/Wordwise_Ctrl-Y_in_insert_mode
inoremap <expr> <C-Y> matchstr(getline(line('.')-1), '\%' . virtcol('.') . 'v\%(\k\+\\|.\)')

" Execute current file
nnoremap <F10> :!%:p<CR>

" fast escaping
imap ;; <ESC>

" Use gQ instead
map Q <Nop>
" Screw F1 help
map <F1> <Nop>
nnoremap <F1> :help<Space>

" Duplicate a line with increment
nnoremap yA yyp<C-a>

" copy/paste to/from x clipboard
vmap <leader>y :!xclip -f -sel clip<CR>
map <leader>p :r!xclip -o<CR>

" buffer
nmap <leader>s<left>  :leftabove  vnew<CR>
nmap <leader>s<right> :rightbelow vnew<CR>
nmap <leader>s<up>    :leftabove  new<CR>
nmap <leader>s<down>  :rightbelow new<CR>


" auto complete {} indent and position the cursor in the middle line
inoremap {<CR> {<CR>}<Esc>O
inoremap (<CR> (<CR>)<Esc>O
inoremap [<CR> [<CR>]<Esc>O
inoremap <<CR> <<CR>><Esc>O

" Git {{{
nnoremap <silent> <Leader>gA  :Git add .<BAR>GitGutter<CR>
nnoremap <silent> <Leader>ga  :Gwrite<BAR>sleep 50m<BAR>GitGutterAll<CR>
nnoremap <silent> <Leader>gb  :Gblame<CR>
nnoremap <silent> <Leader>gca :Gcommit --amend -v<CR>
nnoremap <silent> <Leader>gcc :Gcommit -v<CR>
nnoremap <silent> <Leader>gci :update <BAR> Gcommit --interactive --verbose<CR>
nnoremap <silent> <Leader>gcv :update <BAR> Gcommit -v %<CR>
nnoremap <silent> <Leader>gd  :Gdiff<CR>
nnoremap <silent> <Leader>gdd :Gdiff HEAD<CR>
nnoremap <silent> <Leader>gf  :Gfetch<CR>
" update signs across all buffers
nnoremap <silent> <Leader>gg  :GitGutterAll<CR>
nnoremap <silent> <Leader>ggm :Git stash save <BAR> Git checkout master<CR>
nnoremap <silent> <Leader>ggp :Git diff --patch % > /tmp/%:t.diff<CR>
nnoremap <silent> <Leader>gll :Git log --graph --decorate --stat<CR>
nnoremap <silent> <Leader>glp :Git log --graph --decorate --stat --cc -p<CR>
" list branches by recently commited
nnoremap <silent> <Leader>glr :Git recent<CR>
" git-pull
nnoremap <silent> <Leader>gpl :Gpull<CR>
" git-push
nnoremap <silent> <Leader>gps :Gpush<CR>
" unadd current file
nnoremap <silent> <Leader>grs :Git reset HEAD -- %<BAR>GitGutterAll<CR>
nnoremap <silent> <Leader>gs  :Gstatus<CR>
" }}}

" vimux
function! VimuxRevSearch()
  call VimuxSendKeys('')
  call _VimuxTmux("select-"._VimuxRunnerType()." -t ".g:VimuxRunnerIndex)
endfunction

nnoremap <Leader>vdr :call VimuxRunCommandInDir(getline('.'), expand('%:p'))<CR>
nnoremap <Leader>vi  :VimuxInspectRunner<CR>
nnoremap <Leader>vj  :call VimuxRunCommand('cd '.expand('%:p:h'))<CR>
nnoremap <Leader>vl  :VimuxRunLastCommand<CR>
nnoremap <Leader>vnr :call VimuxRunCommand(getline('.'), 0)<CR>
nnoremap <Leader>vp  :VimuxPromptCommand<CR>
nnoremap <Leader>vq  :VimuxCloseRunner<CR>
nnoremap <Leader>vr  :VimuxRunCommand getline('.')<CR>
nnoremap <Leader>vs  :call VimuxRevSearch()<CR>
nnoremap <Leader>vt  :VimuxTogglePane<CR>
nnoremap <Leader>vrz :call VimuxRunCommand(getline('.')) <BAR> VimuxZoomRunner<CR>
nnoremap <Leader>vv  :update<BAR>call VimuxRunCommand(
  \ 'sensible-browser '.expand('%:p'))<CR>
nnoremap <Leader>vx  :VimuxInterruptRunner<CR>
nnoremap <Leader>vz  :VimuxZoomRunner<CR>

" vim-wiki
nnoremap <Leader>wv <Plug>VimwikiVSplitLink

" Unite
nnoremap <Space>;   :Unite buffer file_rec/async<CR>
inoremap <Space>;   <Esc>:UniteClose<CR>
nnoremap <Space>:   :Unite session<CR>
nnoremap <Leader>G  :Unite grep:.<CR>
nnoremap <Leader>yy :Unite history/yank<CR>
nnoremap <Leader>bb :Unite -quick-match buffer<CR>
nnoremap <Leader>bp :Unite -auto-preview buffer<CR>

" VimFiler
noremap <silent> <Leader>f  :VimFilerExplorer -winwidth=25 -split -toggle -no-quit<CR>
noremap <silent> <Leader>a  :VimFilerExplorer -find -winwidth=25 -split -toggle -no-quit<CR>
noremap <silent> <Leader>fl :VimFilerExplorer -toggle -find<CR>
noremap <silent> <Leader>fb :VimFilerBufferDir<CR>
noremap <silent> <Leader>fs :VimFilerSplit<CR>

" Tabular
nnoremap <Leader>= :Tabularize<CR>

" Reload configuration
nnoremap <Leader><Delete>   :call ReloadVimrc()<CR>

""""""""""
" Toggles

nnoremap <leader>tlc :set invlist<CR>
nnoremap <leader>tn  :set invnumber<CR>
nnoremap <leader>tp  :set invpaste paste?<CR>
nnoremap <leader>trn :set invrelativenumber<CR>
nnoremap <leader>tsl :setlocal spell! spelllang=en_us <BAR> set complete+=kspell<CR>
nnoremap <leader>tut :UndotreeToggle<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Commands
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
" :help local-additions
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/bundle')

" helper function for on-demand loading
function! Cond(cond, ...)
  let opts = get(a:000, 0, {})
  return a:cond ? opts : extend(opts, { 'on': [], 'for': [] })
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Syntax/language/formatting
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Syntastic syntax checking plugin
Plug 'scrooloose/syntastic', { 'on': 'SyntasticToggle' }

" Haskell
Plug 'neovimhaskell/haskell-vim'

" Completion plugin for Haskell, using ghc-mod
Plug 'eagletmt/neco-ghc'
Plug 'eagletmt/ghcmod-vim'

" Ansible yaml syntax
Plug 'chase/vim-ansible-yaml'

" Nginx syntax
Plug 'nginx.vim'

" Python
Plug 'python-mode/python-mode'

" Add end keywords in various languages
Plug 'tpope/vim-endwise'

" Text filtering and alignment
Plug 'godlygeek/tabular', { 'on': 'Tabularize' }

" Code formatting in Vim by integrating existing code formatters.
Plug 'Chiel92/vim-autoformat'

" Snippet engine
Plug 'SirVer/ultisnips', { 'on': [] }

" vim-snipmate default snippets
Plug 'honza/vim-snippets'

" pandoc markdown syntax
Plug 'vim-pandoc/vim-pandoc-syntax'

" emmet
Plug 'mattn/emmet-vim', { 'for': ['css', 'haml', 'html', 'xml', 'xsl'] }

" Wrap and unwrap function arguments, lists, and dictionaries
Plug 'FooSoft/vim-argwrap'

" UI {{{

" Run commands in tmux
Plug 'benmills/vimux', Cond(len($TMUX) > 0)

" Shell reverse search emulation
Plug 'goldfeld/ctrlr.vim'

" Dim inactive windows
Plug 'blueyed/vim-diminactive'

Plug 'Shougo/vimproc.vim'
Plug 'Shougo/unite.vim'
  " File explorer
  Plug 'Shougo/vimfiler.vim'
  " Sessions
  Plug 'Shougo/unite-session'

"Plug 'Lokaltog/vim-easymotion'

" Eclipse like task list
Plug 'TaskList.vim'

" Lean & mean status/tabline for vim that's light as air
Plug 'donat-b/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Adds filetype glyphs (icons) to other plugins
Plug 'ryanoasis/vim-devicons'

" dependency
Plug 'tpope/vim-dispatch'

" Auto save files
Plug '907th/vim-auto-save'

" }}}

" Controls {{{

" Multiple Selection in vim
Plug 'terryma/vim-multiple-cursors'

" Dark powered asynchronous completion framework for neovim
Plug 'Shougo/deoplete.nvim', Cond(has('nvim'))

" A code-completion engine
Plug 'valloric/YouCompleteMe', { 'on': [] }

" Use <Tab> for all insert completion
Plug 'ervandew/supertab', { 'on': [] }

" enable repeating supported plugin maps with .
Plug 'tpope/vim-repeat'

" move between Vim panes and tmux splits seamlessly
Plug 'christoomey/vim-tmux-navigator'

" Search/replace {{{

" Perl ack frontend for vim
Plug 'mileszs/ack.vim'

" Global Replace
Plug 'vim-scripts/Greplace.vim'

" }}}

" Sensible defaults
Plug 'tpope/vim-sensible'

" File-type-specific templates
Plug 'noahfrederick/vim-skeleton'

" Ultimate calendar application
" :help calendar
Plug 'itchyny/calendar.vim'

" Commenting operations and styles
Plug 'scrooloose/nerdcommenter'

" ASCII drawing
Plug 'vim-scripts/DrawIt'

" Personal wiki for vim
Plug 'vimwiki/vimwiki'

" View man pages in vim
Plug 'vim-utils/vim-man'

" Execute program with options.
Plug 'thinca/vim-quickrun'

" An Interface to WEB APIs
Plug 'mattn/webapi-vim'

" Creating gists on http://gist.github.com
Plug 'mattn/gist-vim'

" A simple vim plugin for quickly create and insert templates
Plug 'kabbamine/vbox.vim'

" Querying of the RFC database and loading RFC/STD documents into a Vim buffer
Plug 'mhinz/vim-rfc'

" Git runtime files
Plug 'tpope/vim-git'

" Git wrapper
Plug 'tpope/vim-fugitive'

" Shows a git diff in the 'gutter'
Plug 'airblade/vim-gitgutter'

" Vim sugar for UNIX shell commands
Plug 'tpope/vim-eunuch'

" Highlight matches
Plug 'qstrahl/vim-matchmaker'

" Quoting/parenthesizing
Plug 'tpope/vim-surround'

" Undo history visualizer
Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }

" Increment dates, times, and more
Plug 'tpope/vim-speeddating'

" Changes working directory to project root
Plug 'airblade/vim-rooter'

" Handling column separated data with Vim
Plug 'chrisbra/csv.vim'

" Interactive scratchpad
Plug 'metakirby5/codi.vim'

" Uncover usage problems in your writing
Plug 'reedes/vim-wordy'

" Pandoc integration
Plug 'vim-pandoc/vim-pandoc'

" Multi-language DBGP debugger
Plug 'joonty/vdebug', { 'on': 'VdebugStart' }

" Color schemes
Plug 'morhetz/gruvbox'
Plug 'nanotech/jellybeans.vim'

augroup load_insertm
  autocmd!
  autocmd InsertEnter * call plug#load('ultisnips', 'YouCompleteMe', 'supertab')
                     \| autocmd! load_insertm
augroup END

call plug#end()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configure plugins
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"
" VimFiler
"
call vimfiler#custom#profile('default', 'context', {
      \ 'edit_action' : 'tabopen',
      \ 'safe' : 1,
      \ 'toggle' : 1,
      \ 'winwidth' : 45,
      \ })
let g:vimfiler_no_default_key_mappings = 1
autocmd FileType vimfiler nmap <buffer> q <Plug>(vimfiler_hide)
autocmd FileType vimfiler nmap <buffer> Q <Plug>(vimfiler_exit)

"
" YouCompleteMe
"
let g:ycm_min_num_of_chars_for_completion = 1
let g:ycm_filetype_specific_completion_to_disable = {
  \ 'gitcommit': 1
  \}

" make YCM compatible with UltiSnips (using supertab)
" http://stackoverflow.com/questions/14896327/ultisnips-and-youcompleteme/22253548#22253548
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
" ---

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_mode_map = {
    \ "mode": "active",
    \ "active_filetypes": [],
    \ "passive_filetypes": ['ansible', 'yaml', 'vim', 'bash'] }

let g:syntastic_ansible_ansible_lint_exec = '/usr/local/bin/ansible-lint'
let g:syntastic_ansible_checkers = ['ansible_lint']

"let g:syntastic_enable_perl_checker = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Neocomplete
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#enable_auto_select = 0
" Show detailed information (type) of symbols.
let g:necoghc_enable_detailed_browse = 1

" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Haskell
let g:haskell_enable_quantification = 1   " hl of `forall`
let g:haskell_enable_recursivedo = 1      " hl of `mdo` and `rec`
let g:haskell_enable_arrowsyntax = 1      " hl of `proc`
let g:haskell_enable_pattern_synonyms = 1 " hl of `pattern`
let g:haskell_enable_typeroles = 1        " hl of type roles
let g:haskell_enable_static_pointers = 1  " hl of `static`
let g:haskell_backpack = 1                " hl of backpack keywords

" python-mode
let g:pymode_options_max_line_length = 120
let g:pymode_lint_options_pep8 =
\ {'max_line_length': g:pymode_options_max_line_length})

" vim-wiki
let g:vimwiki_list = [{}, {'path': '~/vimwiki-work/'}]

" Airline
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts=1
let g:airline_section_y = '%{substitute(getcwd(), "/home/".$USER, "~", "")}'
let g:airline_theme = 'dark'

" Skeleton
let g:skeleton_template_dir = '~/dotfiles/vim/templates'

" Rooter
let g:rooter_patterns = ['Vagrantfile', '.git/']
let g:rooter_silent_chdir = 1

" Vimfiler
let g:vimfiler_as_default_explorer = 1

" Unite
let g:unite_source_history_yank_enable = 1
call unite#custom#source('file_rec/async', 'ignore_pattern',
  \ join([
  \ '\.git/',
  \ '\.jpg',
  \ '\.png',
  \ '\.retry',
  \ '\.stack-work',
  \ '\.vagrant/',
  \ 'vault.yml',
  \ ], '\|'))

" auto-save
let g:auto_save = 1
let g:auto_save_events = ["InsertLeave", "TextChanged"]

" Plugin key-mappings
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

nnoremap <silent> <C-Left>  :TmuxNavigateLeft<CR>
nnoremap <silent> <C-Down>  :TmuxNavigateDown<CR>
nnoremap <silent> <C-Up>    :TmuxNavigateUp<CR>
nnoremap <silent> <C-Right> :TmuxNavigateRight<CR>
nnoremap <silent> <C-/>     :TmuxNavigatePrevious<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Misc
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Set color scheme
set background=dark
colorscheme gruvbox

""""""""""""
" FileType
""""""""""""

" unclutter netrw buffers
autocmd FileType netrw setl bufhidden=wipe
autocmd Filetype gitcommit setlocal spell textwidth=72

" unite doesn't work in paste mode
autocmd Filetype unite set nopaste

""""""""""""

" Add/change file extension in current buffer
" http://vim.wikia.com/wiki/Add/change_file_extension_in_current_buffer
command! -nargs=1 AddExt execute "saveas ".expand("%:p").<q-args>
command! -nargs=1 ChgExt execute "saveas ".expand("%:p:r").<q-args>

" Count word frequency
command! -range=% WordFrequency <line1>,<line2>call WordFrequency()
" Sort words
command! -nargs=0 -range SortWords call SortWords()

" Commit release version
function! ReleaseCommit()
  update
  Gcommit -v %
  let release = systemlist("grep -m1 '+version:' " . expand('%:p') . ' | cut -d: -f2')
  call setline(1, 'Release' . release[0])
endfunction

" Automatically create directories on save
function! s:MkNonExDir(file, buf)
  if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
    let dir=fnamemodify(a:file, ':h')
    if !isdirectory(dir)
      call mkdir(dir, 'p')
    endif
  endif
endfunction

augroup BWCCreateDir
  autocmd!
  autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

function! Min(number, ...)
  let result = a:number
  let index = a:0
  while index > 0
    let result = (a:{index} > result) ? result : a:{index}
    let index = index - 1
  endwhile
  return result
endf

" Sorts numbers in ascending order.
" Examples:
" [2, 3, 1, 11, 2] --> [1, 2, 2, 3, 11]
" ['2', '1', '10','-1'] --> [-1, 1, 2, 10]
function! Sorted(list)
  " Make sure the list consists of numbers (and not strings)
  " This also ensures that the original list is not modified
  let nrs = ToNrs(a:list)
  let sortedList = sort(nrs, "NaturalOrder")
  echo sortedList
  return sortedList
endfunction

" Comparator function for natural ordering of numbers
function! NaturalOrder(firstNr, secondNr)
  if a:firstNr < a:secondNr
    return -1
  elseif a:firstNr > a:secondNr
    return 1
  else
    return 0
  endif
endfunction

" Coerces every element of a list to a number. Returns a new list without
" modifying the original list.
function! ToNrs(list)
  let nrs = []
  for elem in a:list
    let nr = 0 + elem
    call add(nrs, nr)
  endfor
  return nrs
endfunction

function! WordFrequency() range
  " Words are separated by whitespace or punctuation characters
  let wordSeparators = '[[:blank:][:punct:]]\+'
  let allWords = split(join(getline(a:firstline, a:lastline)), wordSeparators)
  let wordToCount = {}
  for word in allWords
    let wordToCount[word] = get(wordToCount, word, 0) + 1
  endfor

  let countToWords = {}
  for [word,cnt] in items(wordToCount)
    let words = get(countToWords,cnt,"")
    " Append this word to the other words that occur as many times in the text
    let countToWords[cnt] = words . " " . word
  endfor

  " Create a new buffer to show the results in
  new
  setlocal buftype=nofile bufhidden=hide noswapfile tabstop=20

  " List of word counts in ascending order
  let sortedWordCounts = Sorted(keys(countToWords))

  call append("$", "count \t words")
  call append("$", "--------------------------")
  " Show the most frequent words first -> Descending order
  for cnt in reverse(sortedWordCounts)
    let words = countToWords[cnt]
    call append("$", cnt . "\t" . words)
  endfor
endfunction

function! SortWords()
    " Get the visual mark points
    let StartPosition = getpos("'<")
    let EndPosition = getpos("'>")

    if StartPosition[0] != EndPosition[0]
        echoerr "Range spans multiple buffers"
    elseif StartPosition[1] != EndPosition[1]
        " This is a multiple line range, probably easiest to work line wise

        " This could be made a lot more complicated and sort the whole
        " lot, but that would require thoughts on how many
        " words/characters on each line, so that can be an exercise for
        " the reader!
        for LineNum in range(StartPosition[1], EndPosition[1])
            call setline(LineNum, join(sort(split(getline('.'), ' ')), " "))
        endfor
    else
        " Single line range, sort words
        let CurrentLine = getline(StartPosition[1])

        " Split the line into the prefix, the selected bit and the suffix

        " The start bit
        if StartPosition[2] > 1
            let StartOfLine = CurrentLine[:StartPosition[2]-2]
        else
            let StartOfLine = ""
        endif
        " The end bit
        if EndPosition[2] < len(CurrentLine)
            let EndOfLine = CurrentLine[EndPosition[2]:]
        else
            let EndOfLine = ""
        endif
        " The middle bit
        let BitToSort = CurrentLine[StartPosition[2]-1:EndPosition[2]-1]

        " Move spaces at the start of the section to variable StartOfLine
        while BitToSort[0] == ' '
            let BitToSort = BitToSort[1:]
            let StartOfLine .= ' '
        endwhile
        " Move spaces at the end of the section to variable EndOfLine
        while BitToSort[len(BitToSort)-1] == ' '
            let BitToSort = BitToSort[:len(BitToSort)-2]
            let EndOfLine = ' ' . EndOfLine
        endwhile

        " Sort the middle bit
        let Sorted = join(sort(split(BitToSort, ' ')), ' ')
        " Reform the line
        let NewLine = StartOfLine . Sorted . EndOfLine
        " Write it out
        call setline(StartPosition[1], NewLine)
    endif
endfunction

" Add argument (can be negative, default 1) to global variable i.
" Return value of i before the change.
function! Inc(...)
  let result = g:i
  let g:i += a:0 > 0 ? a:1 : 1
  return result
endfunction

" A wonky way to convert key-value task syntax in ansible yaml
" doesn't indent anything
function! AnsibleKeyValueTaskFix()
  s/\([a-z0-9_]\+\)=/\1: /g
  s/\([a-z0-9_]\+: \)\%([a-z0-9_]\+:\)\@!/\r\1/g
endfunction

if !exists("*ReloadVimrc")
  function! ReloadVimrc()
    try
      if expand('%:t') == 'vimrc'
        update
      endif

      source ~/.vimrc
    catch /^Vim\%((\a\+)\)\=:E/	" catch all Vim errors
      redraw | echoerr v:exception
    endtry
  endfunction
endif
