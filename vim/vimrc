""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configuration
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" No useless compatability with vi
set nocompatible

" Always use unicode
scriptencoding utf-8
set encoding=utf-8
set fileformat=unix

" Enable syntax highlighting
syntax on
" Required by vundle
filetype off
" Set color scheme
colorscheme elflord

" Ruby community standart indentation
set autoindent
set expandtab
set shiftwidth=2
set softtabstop=2

" Show extra whitespace
set list listchars=tab:>-

" Show line numbers
set number

" History
set history=5000

" Persistent undo
set undofile
set undodir=~/.vim/undo
set undolevels=1000
set undoreload=10000

" Vundle
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()


" Enable file-type specific plugins
filetype plugin on
" Enable file-type specific indenting
filetype indent on

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Key bindings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" F2 saves a file if necessary
nmap <F2> :update<CR>
vmap <F2> <Esc><F2>gv
imap <F2> <c-o><F2>
" F5 to insert current date
:inoremap <F5> <C-R>=strftime("%F")<CR>
nnoremap <F4> :set invpaste paste?<CR>
set pastetoggle=<F4>
set showmode

" Remove trailing whitespaces
nnoremap <Leader>rtw :%s/\s\+$//e<CR>

" Quick movements in insert mode
inoremap III <Esc>I
inoremap AAA <Esc>A
inoremap OOO <Esc>O

" Line modifications
inoremap CC <Esc>C
inoremap SS <Esc>S
inoremap DD <Esc>dd
inoremap UU <Esc>u

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Commands
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Execute current file
nmap <F10> :!%:p<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Sensible defaults
Bundle 'tpope/vim-sensible'

" Ruby support
" :help Ruby
Bundle 'vim-ruby/vim-ruby'

" File-type-specific templates
" :help skeleton
Bundle 'noahfrederick/vim-skeleton'

" Ultimate calendar application
" :help calendar
Bundle 'itchyny/calendar.vim'

" Commenting operations and styles
" :help NERDCommenter
Bundle 'scrooloose/nerdcommenter'

" TomDoc syntax support
Bundle 'wellbredgrapefruit/tomdoc.vim'

" Twitter client
" :help TwitVim
Bundle 'https://bitbucket.org/mortonfox/twitvim'

" ASCII drawing
" :help drawit
" <leader>di to start
" <leader>ds to leave
Bundle 'vim-scripts/DrawIt'

" Personal wiki for vim
" :help vimwiki
Bundle 'vimwiki/vimwiki'

" Markdown
Bundle 'plasticboy/vim-markdown'


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Misc
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Highlight trailing whitespaces
match ErrorMsg '\s\+$'

" Leave insert mode on idle
au CursorHoldI * stopinsert
"au InsertEnter * let updaterestore=&updatetime | set updatetime=10000
"au InsertEnter * let &updatetime=updaterestore

highlight Normal guibg=#32322f ctermbg=236
highlight NonText guibg=#32322f ctermbg=236
highlight ColorColumn guibg=#000000 ctermbg=0
highlight Search ctermbg=cyan ctermfg=black
" it was 2015 year, the year of fire... the year of destruction
let &colorcolumn=join(range(81,999),",")
let &colorcolumn="80,".join(range(133,999),",")

" Add/change file extension in current buffer
" http://vim.wikia.com/wiki/Add/change_file_extension_in_current_buffer
command! -nargs=1 AddExt execute "saveas ".expand("%:p").<q-args>
command! -nargs=1 ChgExt execute "saveas ".expand("%:p:r").<q-args>

" Automatically create directories on save
function s:MkNonExDir(file, buf)
  if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
    let dir=fnamemodify(a:file, ':h')
    if !isdirectory(dir)
      call mkdir(dir, 'p')
    endif
  endif
endfunction

augroup BWCCreateDir
  autocmd!
  autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

function! Min(number, ...)
  let result = a:number
  let index = a:0
  while index > 0
    let result = (a:{index} > result) ? result : a:{index}
    let index = index - 1
  endwhile
  return result
endf

" Sorts numbers in ascending order.
" Examples:
" [2, 3, 1, 11, 2] --> [1, 2, 2, 3, 11]
" ['2', '1', '10','-1'] --> [-1, 1, 2, 10]
function! Sorted(list)
  " Make sure the list consists of numbers (and not strings)
  " This also ensures that the original list is not modified
  let nrs = ToNrs(a:list)
  let sortedList = sort(nrs, "NaturalOrder")
  echo sortedList
  return sortedList
endfunction

" Comparator function for natural ordering of numbers
function! NaturalOrder(firstNr, secondNr)
  if a:firstNr < a:secondNr
    return -1
  elseif a:firstNr > a:secondNr
    return 1
  else 
    return 0
  endif
endfunction

" Coerces every element of a list to a number. Returns a new list without
" modifying the original list.
function! ToNrs(list)
  let nrs = []
  for elem in a:list
    let nr = 0 + elem
    call add(nrs, nr)
  endfor
  return nrs
endfunction

function! WordFrequency() range
  " Words are separated by whitespace or punctuation characters
  let wordSeparators = '[[:blank:][:punct:]]\+'
  let allWords = split(join(getline(a:firstline, a:lastline)), wordSeparators)
  let wordToCount = {}
  for word in allWords
    let wordToCount[word] = get(wordToCount, word, 0) + 1
  endfor

  let countToWords = {}
  for [word,cnt] in items(wordToCount)
    let words = get(countToWords,cnt,"")
    " Append this word to the other words that occur as many times in the text
    let countToWords[cnt] = words . " " . word
  endfor

  " Create a new buffer to show the results in
  new
  setlocal buftype=nofile bufhidden=hide noswapfile tabstop=20

  " List of word counts in ascending order
  let sortedWordCounts = Sorted(keys(countToWords))

  call append("$", "count \t words")
  call append("$", "--------------------------")
  " Show the most frequent words first -> Descending order
  for cnt in reverse(sortedWordCounts)
    let words = countToWords[cnt]
    call append("$", cnt . "\t" . words)
  endfor
endfunction

command! -range=% WordFrequency <line1>,<line2>call WordFrequency()
