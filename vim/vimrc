""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configuration
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" No useless compatability with vi
set nocompatible

" Unicode
scriptencoding utf-8
set encoding=utf-8
set fileformat=unix

" Enable syntax highlighting
syntax on
" Required by vundle
filetype off

" screen lines to use for the command-line
set cmdheight=4

" indentation
set autoindent
set expandtab
set shiftwidth=2
set softtabstop=2

" Whitespace characters
set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:␣

" Show line numbers
set number

" History
set history=5000

" Persistent undo
set undofile
set undolevels=1000
set undoreload=10000

" Automatically re-read files
set autoread

" Default window position when splitting
set splitbelow
set splitright

" Default shell
set shell=sh

" alias unnamed register to the + register
"set clipboard=unnamedplus

" Enable file-type specific indenting
filetype indent on

set viminfo='100,<50,s10,h,%

" Unclutter current working directory
" // means that file names will be built from the complete path to
" the file with all path separators substituted to percent signs.
set backupdir=~/.vim/.backup//,/tmp//
set directory=~/.vim/.swp//,/tmp//
set undodir=~/.vim/undo//,/tmp//

set verbosefile=~/.vim/verbose.log

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Key bindings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Switching buffers
nnoremap <silent> <F12> :bnext<CR>
nnoremap <silent> <F11> :bprev<CR>
" Open new buffer
nnoremap <leader>T :enew<CR>
" Close the current buffer and move to the previous one
nmap <leader>bq :bp <BAR> bdelete! #<CR>

nnoremap <C-W><C-W> :update<CR>

" Insert current date/time
inoremap <silent> <C-D>D <C-R>=strftime("%F")<CR>
inoremap <silent> <C-D>T <C-R>=strftime("%T")<CR>

" Toggle paste mode
nnoremap <leader>tp :set invpaste paste?<CR>

" Toggle line numbers
nnoremap <leader>nn :set invnumber<CR>

" Toggle relative numbers
nnoremap <leader>nr :set invrelativenumber<CR>
set showmode

" Toggle spell-check
map <leader>sc :setlocal spell! spelllang=en_us<CR>

" Remove trailing whitespace
nnoremap <Leader>rtw :%s/\s\+$//e<CR>

" wordwise yank from line above
" sauce: http://vim.wikia.com/wiki/Wordwise_Ctrl-Y_in_insert_mode
inoremap <expr> <C-Y> matchstr(getline(line('.')-1), '\%' . virtcol('.') . 'v\%(\k\+\\|.\)')

" Execute current file
nnoremap <F10> :!%:p<CR>

" fast escaping
imap ;; <ESC>

" Use gQ instead
map Q <Nop>

" copy/paste to/from x clipboard
vmap <leader>y :!xclip -f -sel clip<CR>
map <leader>p :r!xclip -o<CR>

" buffer
nmap <leader>s<left>  :leftabove  vnew<CR>
nmap <leader>s<right> :rightbelow vnew<CR>
nmap <leader>s<up>    :leftabove  new<CR>
nmap <leader>s<down>  :rightbelow new<CR>


" auto complete {} indent and position the cursor in the middle line
inoremap {<CR> {<CR>}<Esc>O
inoremap (<CR> (<CR>)<Esc>O
inoremap [<CR> [<CR>]<Esc>O
inoremap <<CR> <<CR>><Esc>O

" Fugitive
" commit currently open file
nnoremap <silent> <Leader>ga  :Git add %<CR>
nnoremap <silent> <Leader>gb  :Gblame<CR>
nnoremap <silent> <Leader>gcc :Gcommit -v<CR>
nnoremap <silent> <Leader>gci :update <BAR> Gcommit --interactive --verbose<CR>
nnoremap <silent> <Leader>gcv :update <BAR> Gcommit -v %<CR>
nnoremap <silent> <Leader>gd  :Gdiff<CR>
nnoremap <silent> <Leader>ggm :Git stash save <BAR> Git checkout master<CR>
nnoremap <silent> <Leader>gps :Gpush<CR>
nnoremap <silent> <Leader>gs  :Gstatus<CR>

" vimux
nnoremap <Leader>vr  :VimuxRunCommand getline('.')<CR>
nnoremap <Leader>vrz :call VimuxRunCommand(getline('.')) <BAR> VimuxZoomRunner<CR>
nnoremap <Leader>vdr :call VimuxRunCommandInDir(getline('.'), expand('%:p'))<CR>
nnoremap <Leader>vnr :call VimuxRunCommand(getline('.'), 0)<CR>
nnoremap <Leader>vz  :VimuxZoomRunner<CR>
nnoremap <Leader>vq  :VimuxCloseRunner<CR>

" vim-wiki
nnoremap <Leader>wv <Plug>VimwikiVSplitLink

" Unite
nnoremap <C-P> :Unite -start-insert file_rec/async<CR>
nnoremap <silent> <Leader>G  :Unite grep:.<CR>
nnoremap <silent> <Leader>yy :Unite history/yank<CR>
nnoremap <silent> <Leader>bb :Unite -quick-match buffer<CR>
nnoremap <silent> <Leader>bl :Unite buffer<CR>
nnoremap <silent> <Leader>bp :Unite -auto-preview buffer<CR>

" VimFiler
noremap <silent> <Leader>f :VimFilerExplorer -winwidth=25 -split -toggle -no-quit<CR>
noremap <silent> <Leader>a :VimFilerExplorer -find -winwidth=25 -split -toggle -no-quit<CR>
noremap <silent> <Leader>fl :VimFilerExplorer -toggle -find<CR>
noremap <silent> <Leader>fb :VimFilerBufferDir<CR>
noremap <silent> <Leader>fs :VimFilerSplit<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Commands
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
" :help local-additions
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Syntax/language/formatting
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Markdown
Plugin 'plasticboy/vim-markdown'

" Syntastic syntax checking plugin
Plugin 'scrooloose/syntastic'

" Completion plugin for Haskell, using ghc-mod
Plugin 'eagletmt/neco-ghc'

" Ansible yaml syntax
Plugin 'pearofducks/ansible-vim'

" Nginx syntax
Plugin 'nginx.vim'

" Add end keywords in various languages
Plugin 'tpope/vim-endwise'

" Text filtering and alignment
Plugin 'godlygeek/tabular'

" Code formatting in Vim by integrating existing code formatters.
Plugin 'Chiel92/vim-autoformat'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Windows/navigation
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Full path fuzzy file, buffer, mru, tag, ... finder
"Plugin 'ctrlpvim/ctrlp.vim'
"Plugin 'FelikZ/ctrlp-py-matcher'

" Run commands in tmux
Plugin 'benmills/vimux'

" Shell reverse search emulation
Plugin 'goldfeld/ctrlr.vim'

" Dim inactive windows
Plugin 'blueyed/vim-diminactive'

Plugin 'Shougo/vimproc.vim'
Plugin 'Shougo/unite.vim'
  " File explorer
  Plugin 'Shougo/vimfiler.vim'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Sensible defaults
Plugin 'tpope/vim-sensible'

" File-type-specific templates
Plugin 'noahfrederick/vim-skeleton'

" Ultimate calendar application
" :help calendar
Plugin 'itchyny/calendar.vim'

" Commenting operations and styles
Plugin 'scrooloose/nerdcommenter'

" ASCII drawing
Plugin 'vim-scripts/DrawIt'

" Personal wiki for vim
Plugin 'vimwiki/vimwiki'

" View man pages in vim
Plugin 'vim-utils/vim-man'

" Execute program with options.
Plugin 'thinca/vim-quickrun'

" An Interface to WEB APIs
Plugin 'mattn/webapi-vim'

" Creating gists on http://gist.github.com
Plugin 'mattn/gist-vim'

" A simple vim plugin for quickly create and insert templates
Plugin 'kabbamine/vbox.vim'

" Querying of the RFC database and loading RFC/STD documents into a Vim buffer
Plugin 'mhinz/vim-rfc'

" Lean & mean status/tabline for vim that's light as air
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" Automatically open popup menu for completions when you enter characters or
" move the cursor in Insert mode
" :help acp
" obsolete by neocomplete
"Plugin 'AutoComplPop'

" A code-completion engine
" Disabled as not useful right now
"Plugin 'valloric/YouCompleteMe'

" Dark powered asynchronous completion framework for neovim
if has('nvim')
  Plugin 'Shougo/deoplete.nvim'
endif

" completion framework for vim
if !has('nvim')
  Plugin 'Shougo/neocomplete.vim'
endif

" Global Replace plugin
Plugin 'vim-scripts/Greplace.vim'

" Git runtime files
Plugin 'tpope/vim-git'

" Git wrapper
Plugin 'tpope/vim-fugitive'

" Shows a git diff in the 'gutter'
Plugin 'airblade/vim-gitgutter'

" Vim sugar for UNIX shell commands
Plugin 'tpope/vim-eunuch'

" Highlight matches
Plugin 'qstrahl/vim-matchmaker'

" Quoting/parenthesizing
Plugin 'tpope/vim-surround'

" Undo history visualizer
Plugin 'mbbill/undotree'

" Increment dates, times, and more
Plugin 'tpope/vim-speeddating'

" Changes working directory to project root
Plugin 'airblade/vim-rooter'

" Handling column separated data with Vim
Plugin 'chrisbra/csv.vim'

" Interactive scratchpad
Plugin 'metakirby5/codi.vim'

" Highlight trailing whitespace characters
Plugin 'ntpeters/vim-better-whitespace'

" Color schemes
Plugin 'morhetz/gruvbox'
Plugin 'petelewis/vim-evolution'
Plugin 'joshdick/onedark.vim'

call vundle#end()
filetype plugin indent on

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configure plugins
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

"let g:syntastic_enable_perl_checker = 1
"let g:syntastic_perl_checkers = ['perl']
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Neocomplete
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#enable_auto_select = 0
" Show detailed information (type) of symbols.
let g:necoghc_enable_detailed_browse = 1

" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" vim-wiki
let g:vimwiki_list = [{}, {'path': '~/vimwiki-work/'}]

" Markdown
let g:vim_markdown_folding_disabled = 1

" netrw (network oriented reading, writing, and browsing)
" Quick reference map:
" :help netrw-quickmap
let g:netrw_liststyle=3

" Airline
let g:airline_powerline_fonts=1
let g:airline_theme = 'dark'
let g:airline#extensions#tabline#enabled = 1
let g:airline_section_y = '%{substitute(getcwd(), "/home/".$USER, "~", "")}'

" Skeleton
let g:skeleton_template_dir = '~/dotfiles/vim/templates'

" Rooter
let g:rooter_patterns = ['Vagrantfile', '.git/']

" Vimfiler
let g:vimfiler_as_default_explorer = 1

" Unite
let g:unite_source_history_yank_enable = 1

" Rooter
let g:rooter_silent_chdir = 1

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Misc
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Set color scheme
set background=dark
colorscheme gruvbox

" unclutter netrw buffers
autocmd FileType netrw setl bufhidden=wipe

" Add/change file extension in current buffer
" http://vim.wikia.com/wiki/Add/change_file_extension_in_current_buffer
command! -nargs=1 AddExt execute "saveas ".expand("%:p").<q-args>
command! -nargs=1 ChgExt execute "saveas ".expand("%:p:r").<q-args>

" Count word frequency
command! -range=% WordFrequency <line1>,<line2>call WordFrequency()
" Sort words
command! -nargs=0 -range SortWords call SortWords()

" Commit release version
function! ReleaseCommit()
  update
  Gcommit -v %
  let release = systemlist("grep -m1 '+version:' " . expand('%:p') . ' | cut -d: -f2')
  call setline(1, 'Release' . release[0])
endfunction

" Automatically create directories on save
function! s:MkNonExDir(file, buf)
  if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
    let dir=fnamemodify(a:file, ':h')
    if !isdirectory(dir)
      call mkdir(dir, 'p')
    endif
  endif
endfunction

augroup BWCCreateDir
  autocmd!
  autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

function! Min(number, ...)
  let result = a:number
  let index = a:0
  while index > 0
    let result = (a:{index} > result) ? result : a:{index}
    let index = index - 1
  endwhile
  return result
endf

" Sorts numbers in ascending order.
" Examples:
" [2, 3, 1, 11, 2] --> [1, 2, 2, 3, 11]
" ['2', '1', '10','-1'] --> [-1, 1, 2, 10]
function! Sorted(list)
  " Make sure the list consists of numbers (and not strings)
  " This also ensures that the original list is not modified
  let nrs = ToNrs(a:list)
  let sortedList = sort(nrs, "NaturalOrder")
  echo sortedList
  return sortedList
endfunction

" Comparator function for natural ordering of numbers
function! NaturalOrder(firstNr, secondNr)
  if a:firstNr < a:secondNr
    return -1
  elseif a:firstNr > a:secondNr
    return 1
  else
    return 0
  endif
endfunction

" Coerces every element of a list to a number. Returns a new list without
" modifying the original list.
function! ToNrs(list)
  let nrs = []
  for elem in a:list
    let nr = 0 + elem
    call add(nrs, nr)
  endfor
  return nrs
endfunction

function! WordFrequency() range
  " Words are separated by whitespace or punctuation characters
  let wordSeparators = '[[:blank:][:punct:]]\+'
  let allWords = split(join(getline(a:firstline, a:lastline)), wordSeparators)
  let wordToCount = {}
  for word in allWords
    let wordToCount[word] = get(wordToCount, word, 0) + 1
  endfor

  let countToWords = {}
  for [word,cnt] in items(wordToCount)
    let words = get(countToWords,cnt,"")
    " Append this word to the other words that occur as many times in the text
    let countToWords[cnt] = words . " " . word
  endfor

  " Create a new buffer to show the results in
  new
  setlocal buftype=nofile bufhidden=hide noswapfile tabstop=20

  " List of word counts in ascending order
  let sortedWordCounts = Sorted(keys(countToWords))

  call append("$", "count \t words")
  call append("$", "--------------------------")
  " Show the most frequent words first -> Descending order
  for cnt in reverse(sortedWordCounts)
    let words = countToWords[cnt]
    call append("$", cnt . "\t" . words)
  endfor
endfunction

function! SortWords()
    " Get the visual mark points
    let StartPosition = getpos("'<")
    let EndPosition = getpos("'>")

    if StartPosition[0] != EndPosition[0]
        echoerr "Range spans multiple buffers"
    elseif StartPosition[1] != EndPosition[1]
        " This is a multiple line range, probably easiest to work line wise

        " This could be made a lot more complicated and sort the whole
        " lot, but that would require thoughts on how many
        " words/characters on each line, so that can be an exercise for
        " the reader!
        for LineNum in range(StartPosition[1], EndPosition[1])
            call setline(LineNum, join(sort(split(getline('.'), ' ')), " "))
        endfor
    else
        " Single line range, sort words
        let CurrentLine = getline(StartPosition[1])

        " Split the line into the prefix, the selected bit and the suffix

        " The start bit
        if StartPosition[2] > 1
            let StartOfLine = CurrentLine[:StartPosition[2]-2]
        else
            let StartOfLine = ""
        endif
        " The end bit
        if EndPosition[2] < len(CurrentLine)
            let EndOfLine = CurrentLine[EndPosition[2]:]
        else
            let EndOfLine = ""
        endif
        " The middle bit
        let BitToSort = CurrentLine[StartPosition[2]-1:EndPosition[2]-1]

        " Move spaces at the start of the section to variable StartOfLine
        while BitToSort[0] == ' '
            let BitToSort = BitToSort[1:]
            let StartOfLine .= ' '
        endwhile
        " Move spaces at the end of the section to variable EndOfLine
        while BitToSort[len(BitToSort)-1] == ' '
            let BitToSort = BitToSort[:len(BitToSort)-2]
            let EndOfLine = ' ' . EndOfLine
        endwhile

        " Sort the middle bit
        let Sorted = join(sort(split(BitToSort, ' ')), ' ')
        " Reform the line
        let NewLine = StartOfLine . Sorted . EndOfLine
        " Write it out
        call setline(StartPosition[1], NewLine)
    endif
endfunction

" Add argument (can be negative, default 1) to global variable i.
" Return value of i before the change.
function! Inc(...)
  let result = g:i
  let g:i += a:0 > 0 ? a:1 : 1
  return result
endfunction
